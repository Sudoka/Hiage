<?xml version="1.0"?>
<doc>
    <assembly>
        <name>/home/hallgeir/Programming/CSharp/Hiage/Engine/bin/Release/Engine</name>
    </assembly>
    <members>
        <member name="T:Engine.HKey">
            <summary>
            Abstracting the key definitions
            </summary>
        </member>
        <member name="P:Engine.InputManager.MouseWindowPosition">
            <value>
            Window coordinates for mouse cursor
            </value>
        </member>
        <member name="P:Engine.InputManager.MouseWindowPositionChange">
            <value>
            Change in mouse position in window coordinates
            </value>
        </member>
        <member name="T:ISE.FTGlyphOffset">
            <summary>
            Glyph offset information for advanced rendering and/or conversions.
            </summary>
        </member>
        <member name="F:ISE.FTGlyphOffset.width">
            <summary>
            Width of the Glyph, in pixels.
            </summary>
        </member>
        <member name="F:ISE.FTGlyphOffset.height">
            <summary>
            height of the Glyph, in pixels. Represents the number of scanlines
            </summary>
        </member>
        <member name="F:ISE.FTGlyphOffset.top">
            <summary>
            For Bitmap-generated fonts, this is the top-bearing expressed in integer pixels.
            This is the distance from the baseline to the topmost Glyph scanline, upwards Y being positive.
            </summary>
        </member>
        <member name="F:ISE.FTGlyphOffset.left">
            <summary>
            For Bitmap-generated fonts, this is the left-bearing expressed in integer pixels
            </summary>
        </member>
        <member name="F:ISE.FTGlyphOffset.advance">
            <summary>
            This is the transformed advance width for the glyph.
            </summary>
        </member>
        <member name="F:ISE.FTGlyphOffset.lsb_delta">
            <summary>
            The difference between hinted and unhinted left side bearing while autohinting is active. 0 otherwise.
            </summary>
        </member>
        <member name="F:ISE.FTGlyphOffset.rsb_delta">
            <summary>
            The difference between hinted and unhinted right side bearing while autohinting is active. 0 otherwise.
            </summary>
        </member>
        <member name="F:ISE.FTGlyphOffset.linearHoriAdvance">
            <summary>
            The advance width of the unhinted glyph. Its value is expressed in 16.16 fractional pixels, unless FT_LOAD_LINEAR_DESIGN is set when loading the glyph. This field can be important to perform correct WYSIWYG layout. Only relevant for outline glyphs.
            </summary>
        </member>
        <member name="F:ISE.FTGlyphOffset.linearVertAdvance">
            <summary>
            The advance height of the unhinted glyph. Its value is expressed in 16.16 fractional pixels, unless FT_LOAD_LINEAR_DESIGN is set when loading the glyph. This field can be important to perform correct WYSIWYG layout. Only relevant for outline glyphs.
            </summary>
        </member>
        <member name="T:ISE.FTFontType">
            <summary>
            For internal use, to represent the type of conversion to apply to the font
            </summary>
        </member>
        <member name="F:ISE.FTFontType.FT_NotInitialised">
            <summary>
            Font has not been initialised yet
            </summary>
        </member>
        <member name="F:ISE.FTFontType.FT_Texture">
            <summary>
            Font was converted to a series of Textures
            </summary>
        </member>
        <member name="F:ISE.FTFontType.FT_TextureMap">
            <summary>
            Font was converted to a big texture map, representing a collection of glyphs
            </summary>
        </member>
        <member name="F:ISE.FTFontType.FT_Outline">
            <summary>
            Font was converted to outlines and stored as display lists
            </summary>
        </member>
        <member name="F:ISE.FTFontType.FT_OutlineVBO">
            <summary>
            Font was convered to Outliens and stored as Vertex Buffer Objects
            </summary>
        </member>
        <member name="T:ISE.FTFontAlign">
            <summary>
            Alignment of output text
            </summary>
        </member>
        <member name="F:ISE.FTFontAlign.FT_ALIGN_LEFT">
            <summary>
            Left-align the text when it is drawn
            </summary>
        </member>
        <member name="F:ISE.FTFontAlign.FT_ALIGN_CENTERED">
            <summary>
            Center-align the text when it is drawn
            </summary>
        </member>
        <member name="F:ISE.FTFontAlign.FT_ALIGN_RIGHT">
            <summary>
            Right-align the text when it is drawn
            </summary>
        </member>
        <member name="F:ISE.FreeType.OnWriteEvent">
            <summary>
            This event reports on the status of FreeType.
            This is useful to assign to this event to record down
            FreeType output to a debug log file, for example.
            </summary>
        </member>
        <member name="T:ISE.FTFont">
            <summary>
            Font class wraper for displaying FreeType fonts in OpenGL.
            </summary>
        </member>
        <member name="M:ISE.FTFont.#ctor(System.String,System.Int32@)">
            <summary>
            Initialise the Font. Will Initialise the freetype library if not already done so
            </summary>
            <param name="resourcefilename">Path to the external font file</param>
            <param name="Success">Returns 0 if successful</param>
        </member>
        <member name="F:ISE.FTFont.FT_ALIGN">
            <summary>
            Font alignment public parameter
            </summary>
        </member>
        <member name="M:ISE.FTFont.ftInit">
            <summary>
            Initialise the FreeType library
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:ISE.FTFont.ftVersion(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Return the version information for FreeType.
            </summary>
            <param name="Major">Major Version</param>
            <param name="Minor">Minor Version</param>
            <param name="Patch">Patch Number</param>
        </member>
        <member name="M:ISE.FTFont.ftVersionString">
            <summary>
            Return the entire version information for FreeType as a String.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:ISE.FTFont.ftRenderToTexture(System.Int32,System.UInt32)">
            <summary>
            Render the font to a series of OpenGL textures (one per letter)
            </summary>
            <param name="fontsize">size of the font</param>
            <param name="DPI">dots-per-inch setting</param>
        </member>
        <member name="M:ISE.FTFont.Dispose">
            <summary>
            Dispose of the font
            </summary>
        </member>
        <member name="M:ISE.FTFont.DisposeFreeType">
            <summary>
            Dispose of the FreeType library
            </summary>
        </member>
        <member name="M:ISE.FTFont.ftClearFont">
            <summary>
            Clear all OpenGL-related structures.
            </summary>
        </member>
        <member name="M:ISE.FTFont.ftExtent(System.String@)">
            <summary>
            Return the horizontal extent (width),in pixels, of a given font string
            </summary>
            <param name="text">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:ISE.FTFont.ftGetGlyphOffset(System.Char)">
            <summary>
            Return the Glyph offsets for the first character in "text"
            </summary>
        </member>
        <member name="M:ISE.FTFont.ftBeginFont">
            <summary>
            Initialise the OpenGL state necessary fo rendering the font properly
            </summary>
        </member>
        <member name="M:ISE.FTFont.ftWrite(System.String,System.Int32@)">
            <summary>
            Custom GL "write" routine.
            </summary>
            <param name="text">
            The text to print.
            </param>
        </member>
        <member name="M:ISE.FTFont.ftWrite(System.String)">
            <summary>
            Custom GL "write" routine. Slow version
            </summary>
            <param name="text">
            The text to print.
            </param>
        </member>
        <member name="M:ISE.FTFont.ftEndFont">
            <summary>
            Restore the OpenGL state to what it was prior
            to starting to draw the font
            </summary>
        </member>
        <!--FIXME: Invalid documentation markup was found for member P:Engine.Display.CameraX-->
        <!--FIXME: Invalid documentation markup was found for member P:Engine.Display.CameraY-->
        <member name="P:Engine.Display.RenderedCameraX">
            <summary>
            The camera values as they were when the scene was rendered
            </summary>
        </member>
        <member name="P:Engine.Display.RenderedCameraY">
            <summary>
            The camera values as they were when the scene was rendered
            </summary>
        </member>
        <!--FIXME: Invalid documentation markup was found for member P:Engine.Display.Fullscreen-->
        <!--FIXME: Invalid documentation markup was found for member P:Engine.Display.Renderer-->
        <!--FIXME: Invalid documentation markup was found for member P:Engine.Display.ViewportHeight-->
        <!--FIXME: Invalid documentation markup was found for member P:Engine.Display.ViewportWidth-->
        <!--FIXME: Invalid documentation markup was found for member P:Engine.Display.Zoom-->
        <member name="M:Engine.Display.Initialize(System.Int32,System.Int32,Engine.ResourceManager,System.String)">
            <summary>
            Initialize the display, i.e. set up OpenGL, SDL, Direct3D, whatever and create a window.
            </summary>
            <param name="width">
            A <see cref="T:System.Int32" /></param>
            <param name="height">
            A <see cref="T:System.Int32" /></param>
        </member>
        <member name="M:Engine.Display.PrepareViewport">
            <summary>
            Resize the display.
            </summary>
            <param name="width">
            A <see cref="T:System.Int32" /></param>
            <param name="height">
            A <see cref="T:System.Int32" /></param>
        </member>
        <member name="M:Engine.Display.PrepareRender">
            <summary>
            Prepare the window for rendering, like clearing the screen and so on.
            </summary>
        </member>
        <member name="M:Engine.Display.Render">
            <summary>
            Flip the surface, the buffer or whatever to make the good stuff show.
            </summary>
        </member>
        <member name="M:Engine.Display.InViewport(System.Double,System.Double)">
            <summary>
            Check wether or not a point (x,y) is inside the viewport or not.
            </summary>
            <param name="x">
            A <see cref="T:System.Double" /></param>
            <param name="y">
            A <see cref="T:System.Double" /></param>
            <returns>
            A <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:Engine.Display.OnResize(System.Object,SdlDotNet.Graphics.VideoResizeEventArgs)">
            <summary>
            Handle resizes
            </summary>
            <param name="sender">
            A <see cref="T:System.Object" /></param>
            <param name="args">
            A <see cref="T:SdlDotNet.Graphics.VideoResizeEventArgs" /></param>
        </member>
        <!--FIXME: Invalid documentation markup was found for member P:Engine.IRenderable.X-->
        <!--FIXME: Invalid documentation markup was found for member P:Engine.IRenderable.Y-->
        <!--FIXME: Invalid documentation markup was found for member P:Engine.IRenderable.Height-->
        <!--FIXME: Invalid documentation markup was found for member P:Engine.IRenderable.Width-->
        <!--FIXME: Invalid documentation markup was found for member P:Engine.IRenderable.Texture-->
        <!--FIXME: Invalid documentation markup was found for member P:Engine.IRenderable.TextureLeft-->
        <!--FIXME: Invalid documentation markup was found for member P:Engine.IRenderable.TextureRight-->
        <!--FIXME: Invalid documentation markup was found for member P:Engine.IRenderable.TextureTop-->
        <!--FIXME: Invalid documentation markup was found for member P:Engine.IRenderable.TextureBottom-->
        <member name="M:Engine.Renderer.#ctor(Engine.Renderer.TextureMode,Engine.Display,Engine.ResourceManager)">
            <summary>
            Construct the renderer.
            </summary>
            <param name="texmode">
            A <see cref="T:Engine.Renderer.TextureMode" />. Choose "TextureMode.NORMAL_MODE" if your graphics card supports non-power of 2 texture sizes, TextureMode.TEXTURE_RECTANGLE_EXT otherwise.
            </param>
        </member>
        <!--FIXME: Invalid documentation markup was found for member P:Engine.Renderer.GlTextureMode-->
        <member name="M:Engine.Renderer.SetDrawingColor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set the current color for drawing (Applies to both text and textures).
            </summary>
            <param name="red">
            A <see cref="T:System.Double" /></param>
            <param name="green">
            A <see cref="T:System.Double" /></param>
            <param name="blue">
            A <see cref="T:System.Double" /></param>
            <param name="alpha">
            A <see cref="T:System.Double" /></param>
        </member>
        <member name="M:Engine.Renderer.Render(Engine.IRenderable)">
            <summary>
            Render a IRenderable object
            </summary>
            <param name="target">
            A <see cref="T:Engine.IRenderable" /></param>
        </member>
        <member name="M:Engine.Renderer.DrawSquare(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw a square with no texture.
            </summary>
            <param name="x1">
            A <see cref="T:System.Double" /></param>
            <param name="y1">
            A <see cref="T:System.Double" /></param>
            <param name="x2">
            A <see cref="T:System.Double" /></param>
            <param name="y2">
            A <see cref="T:System.Double" /></param>
        </member>
        <member name="M:Engine.Renderer.Render(System.Double,System.Double,Engine.Texture)">
            <summary>
            Render a texture, plain and simple.
            </summary>
            <param name="x">
            A <see cref="T:System.Double" /></param>
            <param name="y">
            A <see cref="T:System.Double" /></param>
            <param name="texture">
            A <see cref="T:Engine.Texture" /></param>
        </member>
        <member name="M:Engine.Renderer.Render(System.Double,System.Double,System.Double,System.Double,Engine.Texture)">
            <summary>
            Render an object, ignoring texture coordinates (that is, render a full texture)
            </summary>
            <param name="x1">
            A <see cref="T:System.Double" /></param>
            <param name="y1">
            A <see cref="T:System.Double" /></param>
            <param name="x2">
            A <see cref="T:System.Double" /></param>
            <param name="y2">
            A <see cref="T:System.Double" /></param>
            <param name="texture">
            A <see cref="T:Engine.Texture" /></param>
        </member>
        <member name="M:Engine.Renderer.Render(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Int32,Engine.Texture,System.Double)">
            <summary>
            "Raw" rendering function
            </summary>
            <param name="x">
            A <see cref="T:System.Double" /></param>
            <param name="y">
            A <see cref="T:System.Double" /></param>
            <param name="width">
            A <see cref="T:System.Double" /></param>
            <param name="height">
            A <see cref="T:System.Double" /></param>
            <param name="texLeft">
            A <see cref="T:System.Int32" /></param>
            <param name="texTop">
            A <see cref="T:System.Int32" /></param>
            <param name="texRight">
            A <see cref="T:System.Int32" /></param>
            <param name="texBottom">
            A <see cref="T:System.Int32" /></param>
            <param name="texture">
            A <see cref="T:Engine.Texture" /></param>
            <param name="rotation">
            A <see cref="T:System.Double" /></param>
        </member>
        <member name="M:Engine.Renderer.DrawLine(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw a line with the current drawing color.
            </summary>
            <param name="x1">
            A <see cref="T:System.Double" /></param>
            <param name="y1">
            A <see cref="T:System.Double" /></param>
            <param name="x2">
            A <see cref="T:System.Double" /></param>
            <param name="y2">
            A <see cref="T:System.Double" /></param>
        </member>
        <member name="M:Engine.Renderer.SetFont(System.String,System.Int32)">
            <summary>
            Set the current font
            </summary>
            <param name="fontName">
            A <see cref="T:System.String" /></param>
            <param name="fontSize">
            A <see cref="T:System.Int32" /></param>
        </member>
        <member name="M:Engine.Renderer.DrawText(System.String,System.Double,System.Double)">
            <summary>
            Draw text to the screen.
            </summary>
            <param name="text">
            A <see cref="T:System.String" /></param>
            <param name="x">
            A <see cref="T:System.Double" /></param>
            <param name="y">
            A <see cref="T:System.Double" /></param>
        </member>
        <member name="M:Engine.Renderer.GenerateTexture(System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            Register a texture with the renderer
            </summary>
            <param name="data">
            A <see cref="T:System.IntPtr" /></param>
            <param name="width">
            A <see cref="T:System.Int32" /></param>
            <param name="height">
            A <see cref="T:System.Int32" /></param>
            <param name="bpp">
            A <see cref="T:System.Int32" /></param>
            <returns>
            A <see cref="T:System.Int32" />. The ID of the texture.
            </returns>
        </member>
        <member name="M:Engine.Renderer.TextureCoordinate(System.Int32,System.Int32)">
            <summary>
            Convert a specified texture coordinate (in pixels from the left or bottom edge of the texture) to the appropriate value for the specified texture mode.
            </summary>
            <param name="c">
            A <see cref="T:System.Int32" />. The coordinate (for instance "53" means 53 pixels from the left, or bottom of the texture).
            </param>
            <param name="size">
            A <see cref="T:System.Int32" />. The size of the texture for the dimension used for c.
            </param>
            <returns>
            A <see cref="T:System.Double" />. The texture coordinate used for rendering.
            </returns>
        </member>
        <member name="M:Engine.Renderer.AccumulateFrame(System.Double)">
            <summary>
            Accumulate a frame into the accumulation buffer.
            </summary>
            <param name="amount">
            A <see cref="T:System.Double" /></param>
        </member>
        <member name="M:Engine.Renderer.MultiplyFrame(System.Double)">
            <summary>
            Multiply the current content of the accumulation buffer by a factor.
            </summary>
            <param name="factor">
            A <see cref="T:System.Double" /></param>
        </member>
        <member name="M:Engine.Renderer.DrawFrame(System.Double)">
            <summary>
            Draw the content of the accumulation buffer to the screen, replacing its current content.
            </summary>
            <param name="fraction">
            A <see cref="T:System.Double" /></param>
        </member>
        <!--FIXME: Invalid documentation markup was found for member P:Engine.Game.MaxFPS-->
        <member name="P:Engine.Game.FPS">
            <value>
            Current FPS
            </value>
        </member>
        <member name="M:Engine.Game.Initialize(System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            Initialize the game: Initialize display, load resources etc.
            </summary>
            <param name="width">
            A <see cref="T:System.Int32" /></param>
            <param name="height">
            A <see cref="T:System.Int32" /></param>
            <param name="fullscreen">
            A <see cref="T:System.Boolean" /></param>
        </member>
        <member name="M:Engine.Game.PushState(Engine.IGameState)">
            <summary>
            Push a new game state onto the state stack
            </summary>
            <param name="state">
            A <see cref="T:Engine.IGameState" /></param>
            <returns>
            Previous <see cref="T:Engine.IGameState" /></returns>
        </member>
        <member name="M:Engine.Game.PopState">
            <summary>
            Pop (remove) the top game state
            </summary>
        </member>
        <member name="M:Engine.Game.Run">
            <summary>
            Run the game states and renderer
            </summary>
        </member>
        <member name="M:Engine.Game.Shutdown">
            <summary>
            Quit the application.
            </summary>
        </member>
        <member name="M:Engine.Game.OnQuit(System.Object,SdlDotNet.Core.QuitEventArgs)">
            <summary>
            Handle closing of the window, causing the application to exit.
            </summary>
            <param name="sender">
            A <see cref="T:System.Object" /></param>
            <param name="args">
            A <see cref="T:SdlDotNet.Core.QuitEventArgs" /></param>
        </member>
        <member name="T:Engine.IGameState">
            <summary>
            Interface for game states
            </summary>
        </member>
        <member name="M:Engine.IGameState.Run(System.Double)">
            <summary>
            Run one iteration of the game.
            </summary>
            <param name="frameTime">
            The number of milliseconds it took to render the last frame.
            </param>
        </member>
        <member name="T:Engine.SpatialGrid`1">
            <summary>
            Grid used for spatial hashing.
            </summary>
        </member>
        <member name="M:Engine.SpatialGrid`1.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a spatial grid object.
            </summary>
            <param name="width">
            A <see cref="T:System.Int32" />. Width of the grid.
            </param>
            <param name="height">
            A <see cref="T:System.Int32" />. Height of the grid.
            </param>
            <param name="gridsize">
            A <see cref="T:System.Int32" />. Maximum allowed size of grid squares/rectangles.
            </param>
        </member>
        <member name="M:Engine.SpatialGrid`1.GridSquare.Add(`0)">
            <summary>
            Add a new object to this spatial grid square.
            </summary>
            <param name="obj">
            A <see cref="!:T" /></param>
        </member>
        <member name="M:Engine.SpatialGrid`1.GridSquare.Remove(`0)">
            <summary>
            Remove an object.
            </summary>
            <param name="obj">
            A <see cref="!:T" /></param>
        </member>
        <member name="M:Engine.SpatialGrid`1.Move(`0,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Move an object from the old grid square to a new one
            </summary>
            <param name="obj">
            A <see cref="!:T" /></param>
            <param name="oldX">
            A <see cref="T:System.Int32" /></param>
            <param name="oldY">
            A <see cref="T:System.Int32" /></param>
            <param name="newX">
            A <see cref="T:System.Int32" /></param>
            <param name="newY">
            A <see cref="T:System.Int32" /></param>
        </member>
        <member name="M:Engine.SpatialGrid`1.Locate(`0)">
            <summary>
            Find the squares containing a specified object
            </summary>
            <param name="obj">
            A <see cref="!:T" /></param>
            <returns>
            A <see cref="!:List" /></returns>
        </member>
        <member name="M:Engine.SpatialGrid`1.GetSurroundingObjects(System.Double,System.Double,System.Int32,System.Int32,System.Int32)">
            <summary>
            Retrieve all objects from the squares who are overlapped by the specified area.
            This function uses SortedList for temporarily storing the objects, and it uses the GetHashCode() function as key.
            Therefore, GetHashCode() needs to be overridden in the class used with the SpatialGrid class to return an unique value.
            </summary>
            <param name="x">
            A <see cref="T:System.Double" /> specifying the X position of the center of the area to search
            </param>
            <param name="y">
            A <see cref="T:System.Double" /> specifying the Y position
            </param>
            <param name="width">
            A <see cref="T:System.Int32" />. The width of the area to search.
            </param>
            <param name="height">
            A <see cref="T:System.Int32" />. The height.
            </param>
            <param name="radius">
            A <see cref="T:System.Int32" /> specifying how much further (in squares) to expand the search. A common value is 1.
            </param>
            <returns>
            A <see cref="!:List" /> containing all objects found in the squares searched
            </returns>
        </member>
        <member name="T:Engine.Timer">
            <summary>
            Timer for... well, timing stuff. Millisecond precision, hopefully.
            </summary>
        </member>
        <member name="M:Engine.Timer.Start">
            <summary>
            Starts the timer
            </summary>
        </member>
        <member name="M:Engine.Timer.Stop">
            <summary>
            Stop the timer, returning the elapsed time. Does not reset the timer.
            </summary>
            <returns>
            A <see cref="T:System.Int32" /></returns>
        </member>
        <member name="T:Engine.Vector">
            <summary>
            Mathematical 2D vector class which can be used for positioning, directions etc.
            </summary>
        </member>
        <member name="P:Engine.Vector.X">
            <value>
            The X component of the vector.
            </value>
        </member>
        <!--FIXME: Invalid documentation markup was found for member P:Engine.Vector.Y-->
        <member name="M:Engine.Vector.Add(Engine.Vector)">
            <summary>
            Add a vector v to this vector, and return the results.
            </summary>
            <param name="v">
            A <see cref="T:Engine.Vector" /></param>
            <returns>
            The resulting <see cref="T:Engine.Vector" /></returns>
        </member>
        <member name="M:Engine.Vector.Subtract(Engine.Vector)">
            <summary>
            Subtract a vector v from this vector, and return the results.
            </summary>
            <param name="v">
            A <see cref="T:Engine.Vector" /></param>
            <returns>
            A <see cref="T:Engine.Vector" /></returns>
        </member>
        <member name="M:Engine.Vector.Scale(System.Double)">
            <summary>
            Multiply both components by scalar.
            </summary>
            <param name="scalar">
            A <see cref="T:System.Double" /></param>
            <returns>
            The resulting <see cref="T:Engine.Vector" /></returns>
        </member>
        <member name="M:Engine.Vector.DotProduct(Engine.Vector)">
            <summary>
            Calculates the dot product of this vector and v.
            </summary>
            <param name="v">
            A <see cref="T:Engine.Vector" /></param>
            <returns>
            The dot product (or scalar product).
            </returns>
        </member>
        <member name="T:Engine.Rnd">
            <summary>
            Make a static way to get a random number, so a new Random object doesn't have to be created on all objects using it.
            </summary>
        </member>
        <member name="M:Engine.Rnd.Next">
            <summary>
            Returns a double between 0 and 1.
            </summary>
            <returns>
            A <see cref="T:System.Double" /></returns>
        </member>
        <member name="T:Engine.Log">
            <summary>
            Class to abstract log writing
            </summary>
        </member>
        <member name="M:Engine.Log.Write(System.String)">
            <summary>
            Write an "OK" log entry
            </summary>
            <param name="s">
            A <see cref="T:System.String" /></param>
        </member>
        <member name="T:Engine.Texture">
            <summary>
            Contains texture information about loaded textures.
            </summary>
        </member>
        <member name="T:Engine.InvalidValueException">
            <summary>
            Probably not needed, use InvalidArgumentException instead in most cases.
            </summary>
        </member>
        <member name="T:Engine.KeyException">
            <summary>
            Thrown when there is an issue with a key (for instance in a dictionary).
            </summary>
        </member>
        <member name="T:Engine.NotFoundException">
            <summary>
            Thrown when something is not found when it was expected
            </summary>
        </member>
        <member name="M:Engine.Edge.#ctor(Engine.Vector,Engine.Vector,Engine.Vector)">
            <summary>
            Create a new edge.
            </summary>
            <param name="p1">
            Defines the first point of the edge
            </param>
            <param name="p2">
            Defines the second point of the edge
            </param>
            <param name="normal">
            The edge normal vector. If this parameter is null, a vector perpendicular to the one defined by the two points p1 and p2 will be calculated.
            </param>
        </member>
        <member name="P:Engine.Edge.Normal">
            <value>
            The edge normal
            </value>
        </member>
        <member name="M:Engine.Tile.#ctor(System.Int32,Engine.Texture,System.Collections.Generic.List{Engine.Edge})">
            <summary>
            Create a new tile
            </summary>
            <param name="id">
            A <see cref="T:System.Int32" /></param>
            <param name="texture">
            A <see cref="T:Engine.Texture" /></param>
            <param name="edges">
            A <see cref="!:List" /></param>
        </member>
        <member name="T:Engine.Tileset">
            <summary>
            Class representing a set of tiles
            </summary>
        </member>
        <member name="T:Engine.TileMap">
            <summary>
            Class representing a grid of tiles
            </summary>
        </member>
        <member name="M:Engine.TileMap.#ctor(Engine.Display,Engine.Tileset,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Construct a tilemap.
            </summary>
            <param name="display">
            The main display is required for camera positions and renderer
            </param>
            <param name="offsetX">
            X offset for the tilemap, in case it's not desired that the drawing starts at (0,0)
            </param>
            <param name="offsetY">
            Y offset
            </param>
        </member>
        <member name="M:Engine.TileMap.#ctor(Engine.Display,Engine.ResourceManager,Engine.MapDescriptor)">
            <summary>
            Create a tilemap from a descriptor.
            </summary>
        </member>
        <member name="M:Engine.TileMap.CalculateEdgePositions(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculate absolute edge positions for all edges in a specified tile in tilemapso that these don't have to be calculated every time they're needed.
            </summary>
        </member>
        <member name="M:Engine.TileMap.Render(System.Int32)">
            <summary>
            Render the tilemap
            </summary>
        </member>
        <member name="T:Engine.Sprite">
            <summary>
            Used to hold sprite information, like texture, animations and so on.
            </summary>
        </member>
        <member name="M:Engine.Sprite.#ctor(Engine.SpriteDescriptor,Engine.ResourceManager)">
            <summary>
            Create the sprite from a SpriteDescriptor object. This requires a reference to the resource manager to load the appropriate resource.
            </summary>
            <param name="spriteDesc">
            A <see cref="T:Engine.SpriteDescriptor" /></param>
            <param name="m">
            A <see cref="T:Engine.ResourceManager" /></param>
        </member>
        <member name="T:Engine.Sprite.Animation">
            <summary>
            Handles animations: Incrementing frames, etc.
            </summary>
        </member>
        <member name="T:Engine.Sprite.Animation.Frame">
            <summary>
            Holds frame information (Position on sprite sheet, delay etc.)
            </summary>
        </member>
        <!--FIXME: Invalid documentation markup was found for member P:Engine.Sprite.Animation.Frame.Left-->
        <!--FIXME: Invalid documentation markup was found for member P:Engine.Sprite.Animation.Frame.Top-->
        <!--FIXME: Invalid documentation markup was found for member P:Engine.Sprite.Animation.Frame.Right-->
        <!--FIXME: Invalid documentation markup was found for member P:Engine.Sprite.Animation.Frame.Bottom-->
        <!--FIXME: Invalid documentation markup was found for member P:Engine.Sprite.Animation.Frame.Delay-->
        <!--FIXME: Invalid documentation markup was found for member M:Engine.Sprite.Animation.AddFrame(System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Int32)-->
        <member name="M:Engine.Sprite.Animation.Update(System.Double)">
            <summary>
            Update the animation (go to next frame if ready)
            </summary>
        </member>
        <!--FIXME: Invalid documentation markup was found for member P:Engine.Sprite.Width-->
        <member name="P:Engine.Sprite.Height">
            <value>
            Bottom edge
            </value>
        </member>
        <member name="P:Engine.Sprite.Texture">
            <value>
            Texture to use for rendering this object
            </value>
        </member>
        <!--FIXME: Invalid documentation markup was found for member P:Engine.Sprite.TextureLeft-->
        <!--FIXME: Invalid documentation markup was found for member P:Engine.Sprite.TextureRight-->
        <!--FIXME: Invalid documentation markup was found for member P:Engine.Sprite.TextureTop-->
        <!--FIXME: Invalid documentation markup was found for member P:Engine.Sprite.TextureBottom-->
        <member name="T:Engine.ParticleEngine">
            <summary>
            Class to handle particles.
            </summary>
        </member>
        <member name="M:Engine.ParticleEngine.Particle.#ctor(Engine.Texture,System.Int32,Engine.Vector,Engine.Vector,Engine.Vector,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Int32)">
            <summary>
            Construct a new particle.
            </summary>
            <param name="t">
            A <see cref="T:Engine.Texture" />. Texture used as a base for the particle.
            </param>
            <param name="position">
            A <see cref="T:Engine.Vector" />. Current position of the particle.
            </param>
            <param name="velocity">
            A <see cref="T:Engine.Vector" />. Velocity of the particle.
            </param>
            <param name="accelleration">
            A <see cref="T:Engine.Vector" />. Accelleration of the particle.
            </param>
            <param name="red">
            A <see cref="T:System.Double" />. Represents the amount of red color in the particle. Must be between 0.0 and 1.0 (inclusive).
            </param>
            <param name="green">
            A <see cref="T:System.Double" />. Represents the amount of green color in the particle. Must be between 0.0 and 1.0 (inclusive).
            </param>
            <param name="blue">
            A <see cref="T:System.Double" />. Represents the amount of blue color in the particle. Must be between 0.0 and 1.0 (inclusive).
            </param>
            <param name="alpha">
            A <see cref="T:System.Double" />. Represents the alpha value of the particle. Must be between 0.0 and 1.0 (inclusive). 0.0 means invisible, 1.0 means completely opaque.
            </param>
            <param name="gradualFade">
            A <see cref="T:System.Boolean" /></param>
        </member>
        <!--FIXME: Invalid documentation markup was found for member P:Engine.ParticleEngine.Particle.TimeToLive-->
        <!--FIXME: Invalid documentation markup was found for member P:Engine.ParticleEngine.Particle.X-->
        <!--FIXME: Invalid documentation markup was found for member P:Engine.ParticleEngine.Particle.Y-->
        <!--FIXME: Invalid documentation markup was found for member P:Engine.ParticleEngine.Particle.Width-->
        <!--FIXME: Invalid documentation markup was found for member P:Engine.ParticleEngine.Particle.Height-->
        <!--FIXME: Invalid documentation markup was found for member P:Engine.ParticleEngine.Particle.Texture-->
        <!--FIXME: Invalid documentation markup was found for member P:Engine.ParticleEngine.Particle.TextureLeft-->
        <!--FIXME: Invalid documentation markup was found for member P:Engine.ParticleEngine.Particle.TextureRight-->
        <!--FIXME: Invalid documentation markup was found for member P:Engine.ParticleEngine.Particle.TextureTop-->
        <!--FIXME: Invalid documentation markup was found for member P:Engine.ParticleEngine.Particle.TextureBottom-->
        <member name="M:Engine.ParticleEngine.Particle.Update(System.Double)">
            <summary>
            Update particle velocity and position
            </summary>
        </member>
        <member name="M:Engine.ParticleEngine.UpdateAndRender(System.Double)">
            <summary>
            Update the particle engine. Move and render all particles.
            </summary>
        </member>
        <member name="T:Engine.ParallaxBackground">
            <summary>
            Tiled scrolling background.
            </summary>
        </member>
        <member name="M:Engine.ParallaxBackground.#ctor(Engine.Texture,System.Double,System.Double,Engine.Display)">
            <summary>
            Constructs a ParallaxBackground object. Needs the display object for the camera position.
            </summary>
            <param name="texture">
            A <see cref="T:Engine.Texture" /></param>
            <param name="parallaxFactor">
            A <see cref="T:System.Double" /></param>
            <param name="display">
            A <see cref="T:Engine.Display" /></param>
            <param name="motionBlur">
            A <see cref="T:System.Boolean" /></param>
        </member>
        <member name="T:Engine.BoundingBox">
            <summary>
            Bounding box class
            </summary>
        </member>
        <member name="T:Engine.ICollidable">
            <summary>
            Interface for all objects that may collide.
            </summary>
        </member>
        <member name="T:Engine.CollisionManager">
            <summary>
            Tests for collisions.
            Usage: Call CollisionManager.PerformCollisionEvents() when the collision events should be performed.
            </summary>
        </member>
        <member name="M:Engine.CollisionManager.PerformCollisionEvents">
            <summary>
            Performs every item in the list of collision events. Should be called once each frame.
            </summary>
        </member>
        <member name="M:Engine.CollisionManager.TestCollision(Engine.ICollidable,System.Collections.Generic.List{Engine.Edge},System.Double)">
            <summary>
            Test collision against a series of edges
            </summary>
            <param name="o1">
            A <see cref="T:Engine.ICollidable" /></param>
            <param name="edges">
            A <see cref="!:List" /></param>
        </member>
        <member name="M:Engine.CollisionManager.TestCollision(Engine.ICollidable,Engine.ICollidable,System.Double)">
            <summary>
            Test collision against a list of other collidable objects.
            </summary>
            <param name="o1">
            A <see cref="T:Engine.ICollidable" /></param>
            <param name="objects">
            A <see cref="!:List" /></param>
        </member>
        <member name="T:Engine.SpriteLoader">
            <summary>
            Class for loading sprite information into the resource manager
            </summary>
        </member>
        <member name="T:Engine.TextureLoader">
            <summary>
            Class for loading textures into the resource manager
            </summary>
        </member>
        <member name="M:Engine.TextureLoader.LoadResource(System.String,System.String)">
            <summary>
            Creates an OpenGL texture from an image.
            </summary>
            <param name="filename">
            A <see cref="T:System.String" /></param>
            <returns>
            A <see cref="T:Engine.Texture" /></returns>
        </member>
        <member name="M:Engine.TilesetLoader.LoadResource(System.String,System.String)">
            <summary>
            Load the tiles and tileset from an XML
            </summary>
            <param name="filename">
            A <see cref="T:System.String" /></param>
            <returns>
            A <see cref="T:Engine.Tileset" /></returns>
        </member>
        <member name="T:Engine.ResourceManager">
            <summary>
            Class for loading / managing resources, like textures
            </summary>
        </member>
        <member name="M:Engine.ResourceManager.#ctor">
            <summary>
            Construct a ResourceManager object
            </summary>
        </member>
        <member name="T:Engine.ResourceManager.Resource`1">
            <summary>
            Loadable resource. Loads when it's used (Lazy loading).
            </summary>
        </member>
        <!--FIXME: Invalid documentation markup was found for member P:Engine.ResourceManager.Resource`1.IsLoaded-->
        <!--FIXME: Invalid documentation markup was found for member P:Engine.ResourceManager.Resource`1.Content-->
        <member name="M:Engine.ResourceManager.Resource`1.Load(Engine.IResourceLoader{`0})">
            <summary>
            Load the resource
            </summary>
            <param name="resourceLoader">
            A <see cref="!:IResourceLoader" /></param>
        </member>
        <member name="M:Engine.ResourceManager.LoadResources(System.String)">
            <summary>
            Load resources from a resource XML file.
            </summary>
            <param name="resourceXML">
            A <see cref="T:System.String" /></param>
        </member>
        <member name="M:Engine.ResourceManager.GetTexture(System.String)">
            <summary>
            Retrieve a texture. Load it if neccesary.
            </summary>
            <param name="name">
            A <see cref="T:System.String" /></param>
            <returns>
            A <see cref="T:Engine.Texture" /></returns>
        </member>
        <member name="T:Engine.IResourceLoader`1">
            <summary>
            Interface for resource loaders: Texture loaders, etc.
            </summary>
        </member>
        <member name="T:Engine.ObjectDescriptor">
            <summary>
            Class used to describe an object.
            Each object has a type (or "class", describing the general type of the object), and a name, which is the name of the object within that class.
            So for instance in Mario, one object may have type "GroundEnemy" which describes all enemies which walk along the ground, while name may be "Goomba",
            which makes it a Goomba, or "GreenKoopa" or similar. This allows for using different attributes (sprites, speed, etc.) for common types of enemies.
            Additional properties individual to each game is stored as well.
            </summary>
        </member>
        <member name="T:Engine.SpriteDescriptor">
            <summary>
            Used for creating the sprite. A template or "blueprint".
            </summary>
        </member>
        <member name="T:Engine.MapDescriptor">
            <summary>
            Describes a tilemap. Used as a template to create maps, and for storage in the resource manager.
            </summary>
        </member>
        <member name="T:Engine.MapDescriptor.MapObject">
            <summary>
            Contains information on objects placed around the map
            </summary>
        </member>
    </members>
</doc>
